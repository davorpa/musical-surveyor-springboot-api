# Spring Boot Application Properties
# (https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html)

#
# Best performance practices by
# https://towardsdev.com/spring-boot-data-access-layer-best-practices-c544d400de7b
# https://vladmihalcea.com/spring-boot-application-properties/
# https://thorben-janssen.com/configuring-spring-data-jpa-with-spring-boot/



##################################################################
##                      Web Configuration                       ##
##################################################################

## Server HTTP port. Default=8080
server.port=8080

## Web error page
server.error.whitelabel.enabled=true
## When to include exception class name as part of error attributes. Values: true/false
server.error.include-exception=true
## When to include exception message as part of error attributes. Values:
#  - ALWAYS
#  - NEVER
#  - ON_PARAM: if a "message" request param is present
server.error.include-message=always
## When to include binding errors as part of error attributes. Values:
#  - ALWAYS
#  - NEVER
#  - ON_PARAM: if a "errors" request param is present
server.error.include-binding-errors=always
## When to include exception stacktrace as part of error attributes. Values:
#  - ALWAYS
#  - NEVER
#  - ON_PARAM: if a "trace" request param is present
server.error.include-stacktrace=on_param

## Web HTTPS settings
server.tomcat.remoteip.remote-ip-header=x-forwarded-for
server.tomcat.remoteip.protocol-header=x-forwarded-proto

### Web Gzip
server.compression.enabled=true
server.compression.mime-types=application/json,application/hal+json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css

## Web static resources versioning
spring.web.resources.chain.strategy.content.enabled=true
spring.web.resources.chain.strategy.content.paths=/js/**,/css/**

### Web caching
spring.web.resources.cache.cachecontrol.max-age=30d



##################################################################
##                 Database Configuration                       ##
##################################################################

## DataSource properties
spring.datasource.generate-unique-name=false
spring.datasource.name=testdb
#spring.datasource.url=
#spring.datasource.username=
#spring.datasource.password=

## HikariCP configuration
spring.datasource.hikari.minimumIdle=0
spring.datasource.hikari.maximum-pool-size=40
spring.datasource.hikari.maxLifetime=900000
spring.datasource.hikari.transaction-isolation=TRANSACTION_READ_COMMITTED
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.data-source-properties.useServerPrepStmts=false
spring.datasource.hikari.data-source-properties.cachePrepStmts=true
spring.datasource.hikari.data-source-properties.prepStmtCacheSize=500
spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=1024

## SQL Database Initialization

## Indicates the mode when SQL initialization is required.
# - always: always initialize the database.
# - embedded: only initialize an embedded database. Default
# - never: never initialize the database.
spring.sql.init.mode=always
## This allows you to switch to database-specific scripts if necessary.
#  For example, you might choose to set it to the vendor name of the database
#  (hsqldb, h2, oracle, mysql, postgresql, and so on). Default: "all"
spring.sql.init.platform=h2

## Script-based DataSource initialization is performed, by default, before any
#  JPA EntityManagerFactory beans are created.
#  If this flag is set to "true", will defer data source initialization until after
#  any EntityManagerFactory beans have been created and initialized.
#  schema.sql can then be used to make additions to any schema creation performed
#  by Hibernate and data.sql can be used to populate it.
spring.jpa.defer-datasource-initialization=false



##################################################################
##                   Spring Data Configuration                  ##
##################################################################

## The auditor name used as fallback or default value.
#  Default value: system
spring.data.auditing.auditor-name=SYSTEM

## Sort HTTP request parameter name. Defaults to "sort"
spring.data.web.sort.sort-parameter=sort
## Page size HTTP request parameter name. Defaults to "size"
spring.data.web.pageable.size-parameter=size
## Page index HTTP request parameter name. Defaults to "page"
spring.data.web.pageable.page-parameter=page
## Default page size. Defaults to 20
spring.data.web.pageable.default-page-size=100
## Whether to expose and assume 1-based page number indexes. Defaults to "false",
#  meaning a page number of 0 in the request equals the first page.
spring.data.web.pageable.one-indexed-parameters=true
## Maximum page size to be accepted. Defaults to 2000
spring.data.web.pageable.max-page-size=2000
## General prefix to be prepended to the page number and page size parameters.
#  Defaults to ""
spring.data.web.pageable.prefix=
## Delimiter to be used between the qualifier and the actual page number and
#  size properties. Defaults to "_"
spring.data.web.pageable.qualifier-delimiter=_



##################################################################
##              JPA/Hibernate Configuration                     ##
##################################################################

logging.level.org.hibernate=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE
logging.level.org.hibernate.type.descriptor.sql=TRACE
logging.level.org.hibernate.SQL_SLOW=INFO

spring.jpa.show-sql=false
spring.jpa.open-in-view=false

## Hibernate DDL mode.
# This is actually a shortcut for the "hibernate.hbm2ddl.auto" property.
# Defaults to "create-drop" when using an embedded database and no schema
# manager was detected. Otherwise, defaults to "none".
# Values:
# - create:  Hibernate first drops existing tables and then creates new tables.
# - update:  The object model created based on the mappings (annotations or XML)
#            is compared with the existing schema, and then Hibernate updates the
#            schema according to the diff. It never deletes the existing tables
#            or columns even if they are no longer required by the application.
# - create-drop:  similar to create, with the addition that Hibernate will drop
#                 the database after all operations are completed; typically used
#                 for unit testing
# - validate:  Hibernate only validates whether the tables and columns exist;
#              otherwise, it throws an exception.
# - none:  This value effectively turns off the DDL generation.
spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true
spring.jpa.properties.hibernate.jdbc.time_zone=UTC
spring.jpa.properties.hibernate.jdbc.batch_size=15
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.query.in_clause_parameter_padding=true
spring.jpa.properties.hibernate.query.fail_on_pagination_over_collection_fetch=true
spring.jpa.properties.hibernate.query.plan_cache_max_size=4096
spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size=200

spring.jpa.properties.hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS=30



##################################################################
##              SpringDoc OpenAPI / Swagger                     ##
##################################################################
# https://springdoc.org/properties.html

## Enable or disable SpringDoc OpenAPI. Default: true
springdoc.api-docs.enabled=true
## Enable or disable SpringDoc OpenAPI UI. Default: true
springdoc.swagger-ui.enabled=true

## Boolean OR String. If set, enables filtering. The top bar will show an edit box that
# you can use to filter the tagged operations that are shown. Can be Boolean to enable
# or disable, or a string, in which case filtering will be enabled using that string as
# the filter expression. Filtering is case-sensitive matching the filter expression
# anywhere inside the tag.
springdoc.swagger-ui.filter=true
## Boolean. Controls the display of the request duration (in milliseconds) for
# "Try it out" requests.
springdoc.swagger-ui.display-request-duration=true
